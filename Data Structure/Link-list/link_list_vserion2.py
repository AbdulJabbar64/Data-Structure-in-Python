# -*- coding: utf-8 -*-
"""link_list_vserion2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tv1DdMQ-MOPrkXx2lXMBGmQa_DbFtHTs
"""

class Node():

  def __init__(self,data):
    self.data = data
    self.next = None
    
class LinkedList():

  def __init__(self):
    self.head = None
    self.tail = None
  
  def append(self,data):
    new_node = Node(data)
    if self.head == None:
      self.head = new_node
      self.tail = self.head
      self.length = 1
    else:
      self.tail.next = new_node
      self.tail = new_node 
      self.length += 1
  
  def prepend(self,data):
    new_node = Node(data)
    new_node.next = self.head 
    self.head = new_node

  def insert(self,index,data):
    new_node = Node(data)
    i = 0
    temp = self.head
    if index >= self.length:
      self.append(data)
      return 
    if index ==0:
      self.prepend(data)
      return
    while i<self.length:
      if i == index-1:
        temp.next , new_node.next = new_node , temp.next
        self.length+=1
        break
      temp = temp.next
      i+=1
    

  def remove(self,index):
    temp = self.head
    i=0
    if index >= self.length:
      print("Entered wrong index")
    
    if index == 0:
      self.head = self.head.next
      self.length -= 1   
      return       

    while i<self.length:
      if i == index-1:
        temp.next = temp.next.next
        self.length-=1
        break
      i+=1
      temp = temp.next
    
  def printl(self):
    temp = self.head
    while temp != None:
      print(temp.data , end = ' ')
      temp = temp.next
    print()
  
  def length_of_linklist(self):
    print('Length = '+str(self.length))

  
  def search(self, data):
        current = self.head
        found = False
        while current and found is False:
            if current.data == data:
                found = True
            else:
                current = current.next
        if current is None:
            # raise ValueError("Data not in list")
            # print()
            return "Data is not found in Link-list"
        # print(current.data)
        return current.data
    

l = LinkedList()
l.append(10)
l.append(5)
l.append(6)
l.append(8)
l.append(10)
# l.prepend(1)
l.insert(2,99)
l.insert(34,23)
# l.remove(5)
# print(l.head.data, l.tail.data)
# l.printl()
# print("")
# l.reverse()
l.printl()
dataa =  l.search(66)
print(dataa)
# print()
# l.length_of_linklist()
# print(l.head.data, l.tail.data)

